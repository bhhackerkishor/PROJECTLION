/* import React, { useState, useEffect } from "react";

const Game = () => {
  const [fires, setFires] = useState(generateFires(5)); // Generate 5 fires initially
  const [padPosition, setPadPosition] = useState(50);
  const [timeLeft, setTimeLeft] = useState(45);
  const [score, setScore] = useState(0);
  const [isGameOver, setIsGameOver] = useState(false);

  useEffect(() => {
    // Set interval for the falling fire (speed doubled), but only if the game is not over
    const intervalId = setInterval(() => {
      if (!isGameOver) {
        setFires((prevFires) => {
          return prevFires.map((fire) => {
            if (fire.y >= 100) {
              // If fire reaches the bottom, reset it
              return { x: Math.random() * 100, y: 0 };
            }
            return { ...fire, y: fire.y + 2 }; // Move each fire down twice as fast
          });
        });
      }
    }, 50); // Interval time reduced to make the fire fall faster

    // Set interval for the game timer, but stop when it reaches 0
    const timerId = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev > 0) {
          return prev - 1;
        } else {
          setIsGameOver(true); // Set game over flag
          clearInterval(timerId); // Stop the timer
          return 0;
        }
      });
    }, 1000);

    return () => {
      clearInterval(intervalId);
      clearInterval(timerId);
    };
  }, [isGameOver]);

  // Detect collisions
  useEffect(() => {
    if (!isGameOver) {
      setFires((prevFires) =>
        prevFires.map((fire) => {
          if (fire.y >= 90 && fire.x > padPosition - 10 && fire.x < padPosition + 10) {
            setScore((score) => score + 1); // Increase score
            return { x: Math.random() * 100, y: 0 }; // Reset fire position
          }
          return fire;
        })
      );
    }
  }, [fires, padPosition, isGameOver]);

  // Generate initial fires
  function generateFires(num) {
    let firesArray = [];
    for (let i = 0; i < num; i++) {
      firesArray.push({ x: Math.random() * 100, y: Math.random() * 50 });
    }
    return firesArray;
  }

  // Move pad
  const handleMouseMove = (e) => {
    if (!isGameOver) {
      setPadPosition((e.clientX / window.innerWidth) * 100);
    }
  };

  return (
    <div onMouseMove={handleMouseMove} style={{ height: "100vh", position: "relative", backgroundColor: "#282c34" }}>
      {fires.map((fire, index) => (
        <div
          key={index}
          style={{
            position: "absolute",
            top: `${fire.y}%`,
            left: `${fire.x}%`,
            fontSize: "20px",
          }}
        >
          ðŸ”¥
        </div>
      ))}
      <div
        style={{
          position: "absolute",
          bottom: "0",
          left: `${padPosition}%`,
          width: "100px",
          height: "20px",
          backgroundColor: "blue",
        }}
      ></div>
      <div style={{ position: "absolute", top: 0, left: 0, color: "white" }}>Time Left: {timeLeft}s</div>
      <div style={{ position: "absolute", top: 0, right: 0, color: "white" }}>Score: {score}</div>
      {isGameOver && <div style={{ position: "absolute", top: "50%", left: "50%", color: "white" }}>Game Over</div>}
    </div>
  );
};

export default Game;

Game Container
import React from "react";

const PlayButton = ({ startGame }) => {
  return (
    <div style={{ textAlign: "center", marginTop: "20%" }}>
      <button
        onClick={startGame}
        style={{
          fontSize: "24px",
          padding: "10px 20px",
          backgroundColor: "green",
          color: "white",
          border: "none",
          borderRadius: "5px",
          cursor: "pointer",
        }}
      >
        Play Game
      </button>
    </div>
  );
};

export default PlayButton;

import React, { useState } from "react";
import Game from "./Game"; // Import the Game component
import PlayButton from "./PlayButton"; // Import the Play button component

const App = () => {
  const [isGameStarted, setIsGameStarted] = useState(false);

  const startGame = () => {
    setIsGameStarted(true); // Start the game when the button is clicked
  };

  return (
    <div>
      {!isGameStarted ? (
        <PlayButton startGame={startGame} /> // Show the Play button if the game has not started
      ) : (
        <Game /> // Show the game once it has started
      )}
    </div>
  );
};

export default App;


*/
.game-container {
  width: 100%;
  height: 100vh;
  background-color: #222;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-family: 'Arial', sans-serif;
  color: #fff;
}

/* Game Header */
.game-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 90%;
  margin-bottom: 20px;
}

.game-title {
  font-size: 24px;
  font-weight: bold;
}

.game-controls {
  display: flex;
  align-items: center;
}

/* Game Board */
.game-board {
  width: 80%;
  height: 80vh;
  background-color: #333;
  border: 2px solid #fff;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(8, 1fr);
  gap: 2px;
}

/* Game Tile */
.game-tile {
  background-color: #444;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Game Item */
.game-item {
  width: 100%;
  height: 100%;
  background-image: url('path/to/item/image.png');
  background-size: cover;
}

/* Game Timer */
.game-timer {
  font-size: 32px;
  font-weight: bold;
  margin-bottom: 20px;
}

/* Game Score */
.game-score {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 20px;
}

/* Game Button */
.game-button {
  padding: 10px 20px;

/*
  import React, { useState, useEffect } from "react";
import "./App.css";

function App() {
  const [score, setScore] = useState(0);
  const [flames, setFlames] = useState([
    { x: 100, y: 100 },
    { x: 200, y: 200 },
    { x: 300, y: 300 },
    { x: 400, y: 400 },
  ]);
  const [flameSize, setFlameSize] = useState(20);
  const [speed, setSpeed] = useState(1);
  const [gameOver, setGameOver] = useState(false);

  useEffect(() => {
    const interval = setInterval(() => {
      setFlames((prevFlames) => {
        return prevFlames.map((flame) => ({
          ...flame,
          y: flame.y + speed,
        }));
      });
    }, 10);

    return () => clearInterval(interval);
  }, [speed]);

  const handleFlameClick = (index) => {
    const newFlames = [...flames];
    newFlames.splice(index, 1);
    setFlames(newFlames);
    setScore(score + 1);
    setFlameSize(flameSize + 2);
    setSpeed(speed + 0.1);
  };

  useEffect(() => {
    if (flames.length === 0) {
      setGameOver(true);
    }
  }, [flames]);

  const resetGame = () => {
    setScore(0);
    setFlames([
      { x: 100, y: 100 },
      { x: 200, y: 200 },
      { x: 300, y: 300 },
      { x: 400, y: 400 },
    ]);
    setFlameSize(20);
    setSpeed(1);
    setGameOver(false);
  };

  return (
    <div className="App">
      <div className="game -container">
        {flames.map((flame, index) => (
          <div
            key={index}
            style={{
              position: "absolute",
              top: flame.y,
              left: flame.x,
              width: flameSize,
              height: flameSize,
              backgroundColor: "red",
              borderRadius: "50%",
              cursor: "pointer",
            }}
            onClick={() => handleFlameClick(index)}
          />
        ))}
        {gameOver && (
          <div className="game-over">
            <h1>Game Over!</h1>
            <p>Score: {score}</p>
            <button onClick={resetGame}>Play Again</button>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
  */
